const express = require('express');
const session = require('express-session');
const fetch = require('node-fetch');
const path = require('path');
const fs = require('fs');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
const TOKENS_FILE = path.join(__dirname, 'stored_tokens.json');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
function loadStoredTokens() {
  try {
    if (fs.existsSync(TOKENS_FILE)) {
      const data = fs.readFileSync(TOKENS_FILE, 'utf8');
      return JSON.parse(data);
    }
  } catch (error) {
    console.error('Error loading stored tokens:', error);
  }
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
function saveTokens(tokens, userInfo = null) {
  try {
    const data = {
      tokens,
      userInfo,
      savedAt: new Date().toISOString()
    };
    fs.writeFileSync(TOKENS_FILE, JSON.stringify(data, null, 2));
    console.log('Tokens saved successfully');
  } catch (error) {
    console.error('Error saving tokens:', error);
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
app.use(session({
  secret: process.env.SESSION_SECRET || 'your-secret-key-here-change-in-production',
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: process.env.NODE_ENV === 'production',
    httpOnly: true,
    maxAge: 24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞
  }
}));

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Middleware –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
app.use((req, res, next) => {
  if (!req.session.tokens) {
    const storedData = loadStoredTokens();
    if (storedData) {
      req.session.tokens = storedData.tokens;
      req.session.userInfo = storedData.userInfo;
      console.log('Restored tokens from file');
    }
  }
  next();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function isAuthenticated(req, res, next) {
  if (req.session.tokens && req.session.tokens.access_token) {
    next();
  } else {
    res.redirect('/');
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  const isLoggedIn = req.session.tokens && req.session.tokens.access_token;
  
  res.send(`
    <!DOCTYPE html>
    <html lang="ru">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>HH ‚Üí Airtable Integration</title>
      <style>
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
        }
        body {
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          min-height: 100vh;
          display: flex;
          align-items: center;
          justify-content: center;
        }
        .container {
          background: white;
          padding: 40px;
          border-radius: 20px;
          box-shadow: 0 20px 40px rgba(0,0,0,0.1);
          max-width: 500px;
          width: 90%;
          text-align: center;
        }
        h1 {
          color: #333;
          margin-bottom: 10px;
          font-size: 28px;
        }
        .subtitle {
          color: #666;
          margin-bottom: 30px;
          font-size: 16px;
        }
        .status {
          padding: 15px;
          border-radius: 10px;
          margin: 20px 0;
          font-weight: 500;
        }
        .status.success {
          background: #d4edda;
          color: #155724;
          border: 1px solid #c3e6cb;
        }
        .status.warning {
          background: #fff3cd;
          color: #856404;
          border: 1px solid #ffeeba;
        }
        .button {
          display: inline-block;
          padding: 12px 30px;
          margin: 10px;
          background: #667eea;
          color: white;
          text-decoration: none;
          border-radius: 25px;
          font-weight: 500;
          transition: all 0.3s ease;
          border: none;
          cursor: pointer;
          font-size: 16px;
        }
        .button:hover {
          background: #5a67d8;
          transform: translateY(-2px);
          box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        .button.secondary {
          background: #48bb78;
        }
        .button.secondary:hover {
          background: #38a169;
        }
        .user-info {
          background: #f7fafc;
          padding: 20px;
          border-radius: 10px;
          margin: 20px 0;
          text-align: left;
        }
        .user-info h3 {
          color: #2d3748;
          margin-bottom: 10px;
        }
        .user-info p {
          color: #4a5568;
          margin: 5px 0;
        }
        .features {
          text-align: left;
          margin: 30px 0;
        }
        .features h3 {
          color: #2d3748;
          margin-bottom: 15px;
        }
        .features ul {
          list-style: none;
          padding: 0;
        }
        .features li {
          padding: 8px 0;
          color: #4a5568;
        }
        .features li:before {
          content: "‚úì ";
          color: #48bb78;
          font-weight: bold;
          margin-right: 10px;
        }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>üîÑ HH ‚Üí Airtable</h1>
        <p class="subtitle">–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è HeadHunter —Å Airtable</p>
        
        ${isLoggedIn ? `
          <div class="status success">
            ‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ HeadHunter
          </div>
          
          ${req.session.userInfo ? `
            <div class="user-info">
              <h3>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</h3>
              <p><strong>Email:</strong> ${req.session.userInfo.email}</p>
              <p><strong>–ö–æ–º–ø–∞–Ω–∏—è:</strong> ${req.session.userInfo.employer || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
              <p><strong>–¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞:</strong> ${req.session.userInfo.isEmployer ? '–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å' : '–°–æ–∏—Å–∫–∞—Ç–µ–ª—å'}</p>
            </div>
          ` : ''}
          
          <div class="features">
            <h3>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</h3>
            <ul>
              <li>–ü–æ–∏—Å–∫ —Ä–µ–∑—é–º–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º</li>
              <li>–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞</li>
              <li>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º</li>
              <li>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Airtable</li>
            </ul>
          </div>
          
          <a href="/search" class="button">üîç –ü–æ–∏—Å–∫ —Ä–µ–∑—é–º–µ</a>
          <a href="/logout" class="button secondary">üö™ –í—ã–π—Ç–∏</a>
        ` : `
          <div class="status warning">
            ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ HeadHunter
          </div>
          
          <div class="features">
            <h3>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</h3>
            <ul>
              <li>–ü–æ–∏—Å–∫ —Ä–µ–∑—é–º–µ –≤ –±–∞–∑–µ HeadHunter</li>
              <li>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É, –∑–∞—Ä–ø–ª–∞—Ç–µ, –æ–ø—ã—Ç—É</li>
              <li>–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤</li>
              <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Airtable</li>
              <li>–ó–∞—â–∏—â–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</li>
            </ul>
          </div>
          
          <a href="/auth" class="button">üîê –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ HeadHunter</a>
        `}
      </div>
    </body>
    </html>
  `);
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ HeadHunter
app.get('/auth', (req, res) => {
  const authUrl = `https://hh.ru/oauth/authorize?` +
    `response_type=code&` +
    `client_id=${process.env.HH_CLIENT_ID}&` +
    `redirect_uri=${process.env.HH_REDIRECT_URI}`;
  
  res.redirect(authUrl);
});

// Callback –æ—Ç HeadHunter
app.get('/callback', async (req, res) => {
  const { code } = req.query;
  
  if (!code) {
    return res.redirect('/?error=no_code');
  }
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    const tokenResponse = await fetch('https://hh.ru/oauth/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: new URLSearchParams({
        grant_type: 'authorization_code',
        client_id: process.env.HH_CLIENT_ID,
        client_secret: process.env.HH_CLIENT_SECRET,
        redirect_uri: process.env.HH_REDIRECT_URI,
        code: code
      })
    });
    
    const tokens = await tokenResponse.json();
    
    if (tokens.error) {
      throw new Error(tokens.error_description || tokens.error);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ —Å–µ—Å—Å–∏—é
    req.session.tokens = tokens;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const userResponse = await fetch('https://api.hh.ru/me', {
      headers: {
        'Authorization': `Bearer ${tokens.access_token}`,
        'User-Agent': 'HH-Airtable-App/1.0'
      }
    });
    
    const userData = await userResponse.json();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    req.session.userInfo = {
      email: userData.email,
      employer: userData.employer ? userData.employer.name : null,
      employerId: userData.employer ? userData.employer.id : null,
      isEmployer: !!userData.employer
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Ñ–∞–π–ª
    saveTokens(tokens, req.session.userInfo);
    
    res.redirect('/');
  } catch (error) {
    console.error('Auth error:', error);
    res.redirect('/?error=auth_failed');
  }
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞
app.get('/search', isAuthenticated, (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="ru">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>–ü–æ–∏—Å–∫ —Ä–µ–∑—é–º–µ - HH ‚Üí Airtable</title>
      <style>
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
        }
        body {
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
          background: #f7fafc;
          min-height: 100vh;
          padding: 20px;
        }
        .container {
          max-width: 800px;
          margin: 0 auto;
          background: white;
          padding: 40px;
          border-radius: 20px;
          box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        h1 {
          color: #2d3748;
          margin-bottom: 30px;
          text-align: center;
        }
        .form-group {
          margin-bottom: 25px;
        }
        label {
          display: block;
          color: #4a5568;
          font-weight: 500;
          margin-bottom: 8px;
        }
        input, select {
          width: 100%;
          padding: 12px;
          border: 2px solid #e2e8f0;
          border-radius: 10px;
          font-size: 16px;
          transition: border-color 0.3s;
        }
        input:focus, select:focus {
          outline: none;
          border-color: #667eea;
        }
        .form-row {
          display: grid;
          grid-template-columns: 1fr 1fr;
          gap: 20px;
        }
        button {
          width: 100%;
          padding: 14px;
          background: #667eea;
          color: white;
          border: none;
          border-radius: 10px;
          font-size: 18px;
          font-weight: 500;
          cursor: pointer;
          transition: all 0.3s;
        }
        button:hover {
          background: #5a67d8;
          transform: translateY(-2px);
          box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }
        .help-text {
          font-size: 14px;
          color: #718096;
          margin-top: 5px;
        }
        .back-link {
          text-align: center;
          margin-top: 20px;
        }
        .back-link a {
          color: #667eea;
          text-decoration: none;
        }
        .back-link a:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>üîç –ü–æ–∏—Å–∫ —Ä–µ–∑—é–º–µ</h1>
        
        <form action="/search-results" method="get">
          <div class="form-group">
            <label for="text">–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞</label>
            <input 
              type="text" 
              id="text" 
              name="text" 
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º, JavaScript developer"
              required
            >
            <p class="help-text">–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –Ω–∞–≤—ã–∫–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</p>
          </div>
          
          <div class="form-row">
            <div class="form-group">
              <label for="area">–†–µ–≥–∏–æ–Ω</label>
              <select id="area" name="area">
                <option value="1">–ú–æ—Å–∫–≤–∞</option>
                <option value="2">–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</option>
                <option value="3">–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥</option>
                <option value="4">–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫</option>
                <option value="5">–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥</option>
                <option value="66">–ö–∞–∑–∞–Ω—å</option>
                <option value="88">–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä</option>
                <option value="104">–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É</option>
                <option value="113">–í—Å—è –†–æ—Å—Å–∏—è</option>
              </select>
            </div>
            
            <div class="form-group">
              <label for="experience">–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã</label>
              <select id="experience" name="experience">
                <option value="">–õ—é–±–æ–π</option>
                <option value="noExperience">–ù–µ—Ç –æ–ø—ã—Ç–∞</option>
                <option value="between1And3">–û—Ç 1 –¥–æ 3 –ª–µ—Ç</option>
                <option value="between3And6">–û—Ç 3 –¥–æ 6 –ª–µ—Ç</option>
                <option value="moreThan6">–ë–æ–ª–µ–µ 6 –ª–µ—Ç</option>
              </select>
            </div>
          </div>
          
          <div class="form-row">
            <div class="form-group">
              <label for="salary_from">–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç (—Ä—É–±.)</label>
              <input 
                type="number" 
                id="salary_from" 
                name="salary_from" 
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 50000"
              >
            </div>
            
            <div class="form-group">
              <label for="per_page">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</label>
              <select id="per_page" name="per_page">
                <option value="10">10 —Ä–µ–∑—é–º–µ</option>
                <option value="20" selected>20 —Ä–µ–∑—é–º–µ</option>
                <option value="50">50 —Ä–µ–∑—é–º–µ</option>
                <option value="100">100 —Ä–µ–∑—é–º–µ</option>
              </select>
            </div>
          </div>
          
          <button type="submit">üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫</button>

          <div class="form-group">
            <label for="skills_must_have">–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</label>
            <input 
              type="text" 
              id="skills_must_have" 
              name="skills_must_have" 
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: AutoCAD, SolidWorks, —Ä–µ–ª–µ–π–Ω–∞—è –∑–∞—â–∏—Ç–∞"
            >
            <p class="help-text">–ö–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –í–°–ï —É–∫–∞–∑–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏</p>
          </div>

          <div class="form-group">
            <label for="skills_nice_to_have">–ñ–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</label>
            <input 
              type="text" 
              id="skills_nice_to_have" 
              name="skills_nice_to_have" 
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: SAP, 1C, Oracle, MS Project"
            >
            <p class="help-text">–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤</p>
          </div>
        </form>
        
        <div class="back-link">
          <a href="/">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
        </div>
      </div>
    </body>
    </html>
  `);
});

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
app.get('/search-results', isAuthenticated, async (req, res) => {
  try {
    const searchParams = new URLSearchParams({
      text: req.query.text || '',
      area: req.query.area || '1',
      per_page: req.query.per_page || '20',
      page: req.query.page || '0',
      skills: req.query.skills_must_have || ''
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (req.query.experience) searchParams.append('experience', req.query.experience);
    if (req.query.salary_from) searchParams.append('salary_from', req.query.salary_from);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤—ã–∫–æ–≤
    if (req.query.skills_must_have || req.query.skills_nice_to_have) {
      let skillsText = req.query.text || '';
      
      if (req.query.skills_must_have) {
        const mustHaveSkills = req.query.skills_must_have.split(',').map(s => s.trim()).filter(s => s);
        if (mustHaveSkills.length > 0) {
          skillsText += ' ' + mustHaveSkills.join(' ');
        }
      }
      
      if (req.query.skills_nice_to_have) {
        const niceToHaveSkills = req.query.skills_nice_to_have.split(',').map(s => s.trim()).filter(s => s);
        if (niceToHaveSkills.length > 0) {
          skillsText += ' ' + niceToHaveSkills.join(' OR ');
        }
      }
      
      searchParams.set('text', skillsText.trim());
    }
    
    const response = await fetch(`https://api.hh.ru/resumes?${searchParams}`, {
      headers: {
        'Authorization': `Bearer ${req.session.tokens.access_token}`,
        'User-Agent': 'HH-Airtable-App/1.0'
      }
    });
    
    if (!response.ok) {
      throw new Error(`API error: ${response.status}`);
    }
    
    const data = await response.json();
    
    res.send(`
      <!DOCTYPE html>
      <html lang="ru">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ - HH ‚Üí Airtable</title>
        <style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }
          body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f7fafc;
            padding: 20px;
          }
          .container {
            max-width: 1200px;
            margin: 0 auto;
          }
          h1 {
            color: #2d3748;
            margin-bottom: 20px;
            text-align: center;
          }
          .summary {
            background: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          }
          .resume-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
          }
          .resume-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            transition: transform 0.3s, box-shadow 0.3s;
          }
          .resume-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 20px rgba(0,0,0,0.15);
          }
          .resume-header {
            border-bottom: 1px solid #e2e8f0;
            padding-bottom: 15px;
            margin-bottom: 15px;
          }
          .resume-title {
            font-size: 18px;
            font-weight: 600;
            color: #2d3748;
            margin-bottom: 5px;
          }
          .resume-name {
            color: #4a5568;
            font-size: 16px;
          }
          .resume-details {
            font-size: 14px;
            color: #718096;
            line-height: 1.6;
          }
          .resume-detail {
            margin: 5px 0;
          }
          .buttons {
            display: flex;
            gap: 10px;
            margin-top: 15px;
          }
          .button {
            flex: 1;
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            text-align: center;
            text-decoration: none;
            transition: all 0.3s;
          }
          .button.primary {
            background: #667eea;
            color: white;
          }
          .button.primary:hover {
            background: #5a67d8;
          }
          .button.secondary {
            background: #e2e8f0;
            color: #4a5568;
          }
          .button.secondary:hover {
            background: #cbd5e0;
          }
          .navigation {
            text-align: center;
            margin-top: 30px;
          }
          .navigation a {
            color: #667eea;
            text-decoration: none;
            margin: 0 10px;
          }
          .navigation a:hover {
            text-decoration: underline;
          }
          .loading {
            text-align: center;
            padding: 40px;
          }
          .spinner {
            border: 3px solid #f3f4f6;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
          }
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        </style>
      </head>
      <body>
        <div class="container">
          <h1>üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</h1>
          
          <div class="summary">
            <p><strong>–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—é–º–µ:</strong> ${data.found} | 
            <strong>–ü–æ–∫–∞–∑–∞–Ω–æ:</strong> ${data.items.length} | 
            <strong>–ü–æ–∏—Å–∫:</strong> "${req.query.text}"</p>
          </div>
          
          <div class="resume-grid">
            ${data.items.map(resume => `
              <div class="resume-card">
                <div class="resume-header">
                  <div class="resume-title">${resume.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</div>
                  <div class="resume-name">
                    ${resume.first_name || ''} ${resume.last_name || ''}
                  </div>
                </div>
                
                <div class="resume-details">
                  ${resume.area ? `
                    <div class="resume-detail">üìç ${resume.area.name}</div>
                  ` : ''}
                  
                  ${resume.age ? `
                    <div class="resume-detail">üë§ ${resume.age} –ª–µ—Ç</div>
                  ` : ''}
                  
                  ${resume.salary ? `
                    <div class="resume-detail">üí∞ ${resume.salary.amount.toLocaleString('ru-RU')} ${resume.salary.currency}</div>
                  ` : ''}
                  
                  ${resume.total_experience ? `
                    <div class="resume-detail">üíº –û–ø—ã—Ç: ${Math.floor(resume.total_experience.months / 12)} –ª–µ—Ç</div>
                  ` : ''}
                </div>
                
                <div class="buttons">
                  <a href="/resume/${resume.id}" class="button primary">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
                  <a href="${resume.alternate_url}" target="_blank" class="button secondary">–ù–∞ HH.ru</a>
                </div>
              </div>
            `).join('')}
          </div>
          
          <div class="navigation">
            <a href="/search">‚Üê –ù–æ–≤—ã–π –ø–æ–∏—Å–∫</a>
            ${data.page > 0 ? `
              <a href="/search-results?${new URLSearchParams({...req.query, page: data.page - 1})}">‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è</a>
            ` : ''}
            ${data.pages > data.page + 1 ? `
              <a href="/search-results?${new URLSearchParams({...req.query, page: data.page + 1})}">–°–ª–µ–¥—É—é—â–∞—è ‚Üí</a>
            ` : ''}
            <a href="/">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
          </div>
        </div>
      </body>
      </html>
    `);
  } catch (error) {
    console.error('Search error:', error);
    res.send(`
      <h1>–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞</h1>
      <p>${error.message}</p>
      <a href="/search">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</a>
    `);
  }
});

// –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—é–º–µ
app.get('/resume/:id', isAuthenticated, async (req, res) => {
  try {
    const resumeId = req.params.id;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—é–º–µ
    const response = await fetch(`https://api.hh.ru/resumes/${resumeId}`, {
      headers: {
        'Authorization': `Bearer ${req.session.tokens.access_token}`,
        'User-Agent': 'HH-Airtable-App/1.0'
      }
    });
    
    if (!response.ok) {
      throw new Error(`API error: ${response.status}`);
    }
    
    const resume = await response.json();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
    const canViewContacts = resume.actions && resume.actions.get_with_contact;
    const hasContact = resume.contact && resume.contact.length > 0;
    
    res.send(`
      <!DOCTYPE html>
      <html lang="ru">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${resume.title || '–†–µ–∑—é–º–µ'} - HH ‚Üí Airtable</title>
        <style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }
          body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f7fafc;
            padding: 20px;
          }
          .container {
            max-width: 900px;
            margin: 0 auto;
            background: white;
            padding: 40px;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
          }
          h1 {
            color: #2d3748;
            margin-bottom: 10px;
          }
          .subtitle {
            color: #718096;
            font-size: 18px;
            margin-bottom: 30px;
          }
          .section {
            margin-bottom: 30px;
            padding-bottom: 30px;
            border-bottom: 1px solid #e2e8f0;
          }
          .section:last-child {
            border-bottom: none;
          }
          .section-title {
            font-size: 20px;
            font-weight: 600;
            color: #2d3748;
            margin-bottom: 15px;
          }
          .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
          }
          .info-item {
            padding: 15px;
            background: #f7fafc;
            border-radius: 8px;
          }
          .info-label {
            font-size: 14px;
            color: #718096;
            margin-bottom: 5px;
          }
          .info-value {
            font-size: 16px;
            color: #2d3748;
            font-weight: 500;
          }
          .contact-section {
            background: #fef5e7;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
          }
          .contact-warning {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
          }
          .action-buttons {
            display: flex;
            gap: 15px;
            margin-top: 30px;
          }
          .button {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            text-decoration: none;
            transition: all 0.3s;
            text-align: center;
          }
          .button.primary {
            background: #48bb78;
            color: white;
            flex: 1;
          }
          .button.primary:hover {
            background: #38a169;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(72, 187, 120, 0.4);
          }
          .button.secondary {
            background: #667eea;
            color: white;
          }
          .button.secondary:hover {
            background: #5a67d8;
          }
          .button.disabled {
            background: #cbd5e0;
            color: #718096;
            cursor: not-allowed;
          }
          .experience-item {
            margin-bottom: 20px;
            padding: 15px;
            background: #f7fafc;
            border-radius: 8px;
          }
          .experience-title {
            font-weight: 600;
            color: #2d3748;
            margin-bottom: 5px;
          }
          .experience-company {
            color: #4a5568;
            margin-bottom: 5px;
          }
          .experience-period {
            font-size: 14px;
            color: #718096;
          }
          .back-link {
            text-align: center;
            margin-top: 30px;
          }
          .back-link a {
            color: #667eea;
            text-decoration: none;
          }
          .back-link a:hover {
            text-decoration: underline;
          }
        </style>
      </head>
      <body>
        <div class="container">
          <h1>${resume.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h1>
          <p class="subtitle">${resume.first_name || ''} ${resume.last_name || ''}</p>
          
          <div class="section">
            <h2 class="section-title">üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
            <div class="info-grid">
              ${resume.age ? `
                <div class="info-item">
                  <div class="info-label">–í–æ–∑—Ä–∞—Å—Ç</div>
                  <div class="info-value">${resume.age} –ª–µ—Ç</div>
                </div>
              ` : ''}
              
              ${resume.area ? `
                <div class="info-item">
                  <div class="info-label">–ì–æ—Ä–æ–¥</div>
                  <div class="info-value">${resume.area.name}</div>
                </div>
              ` : ''}
              
              ${resume.salary ? `
                <div class="info-item">
                  <div class="info-label">–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞</div>
                  <div class="info-value">${resume.salary.amount.toLocaleString('ru-RU')} ${resume.salary.currency}</div>
                </div>
              ` : ''}
              
              ${resume.total_experience ? `
                <div class="info-item">
                  <div class="info-label">–û–±—â–∏–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã</div>
                  <div class="info-value">${Math.floor(resume.total_experience.months / 12)} –ª–µ—Ç</div>
                </div>
              ` : ''}
            </div>
          </div>
          
          ${hasContact ? `
            <div class="section">
              <h2 class="section-title">üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
              <div class="info-grid">
                ${resume.contact.map(contact => `
                  <div class="info-item">
                    <div class="info-label">${contact.type.name}</div>
                    <div class="info-value">${contact.value.formatted || contact.value}</div>
                  </div>
                `).join('')}
              </div>
            </div>
          ` : canViewContacts ? `
            <div class="contact-section">
              <h2 class="section-title">üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
              <div class="contact-warning">
                <strong>–í–Ω–∏–º–∞–Ω–∏–µ!</strong> –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä.
                –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–ø–∏—à–µ—Ç 1 –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑ –≤–∞—à–µ–≥–æ –ø–∞–∫–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ —Ä–µ–∑—é–º–µ.
              </div>
              <form action="/view-contacts" method="post" style="display: inline;">
                <input type="hidden" name="resumeId" value="${resumeId}">
                <button type="submit" class="button secondary">üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã (–ø–ª–∞—Ç–Ω–æ)</button>
              </form>
            </div>
          ` : ''}
          
          ${resume.experience && resume.experience.length > 0 ? `
            <div class="section">
              <h2 class="section-title">üíº –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã</h2>
              ${resume.experience.slice(0, 3).map(exp => `
                <div class="experience-item">
                  <div class="experience-title">${exp.position}</div>
                  <div class="experience-company">${exp.company || '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}</div>
                  <div class="experience-period">
                    ${exp.start} - ${exp.end || '–ø–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è'}
                  </div>
                </div>
              `).join('')}
            </div>
          ` : ''}
          
          <div class="action-buttons">
            ${hasContact || canViewContacts ? `
              <form action="/save-to-airtable" method="post" style="flex: 1;">
                <input type="hidden" name="resumeId" value="${resumeId}">
                <button type="submit" class="button primary" style="width: 100%;">
                  üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Airtable
                </button>
              </form>
            ` : `
              <button class="button disabled" style="flex: 1;" disabled>
                üíæ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
              </button>
            `}
            <a href="${resume.alternate_url}" target="_blank" class="button secondary">
              üîó –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ HH.ru
            </a>
          </div>
          
          <div class="back-link">
            <a href="javascript:history.back()">‚Üê –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º</a> | 
            <a href="/search">–ù–æ–≤—ã–π –ø–æ–∏—Å–∫</a> | 
            <a href="/">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
          </div>
        </div>
      </body>
      </html>
    `);
  } catch (error) {
    console.error('Resume view error:', error);
    res.send(`
      <h1>–û—à–∏–±–∫–∞</h1>
      <p>${error.message}</p>
      <a href="/search">–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É</a>
    `);
  }
});

// –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–ø–ª–∞—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
app.post('/view-contacts', isAuthenticated, async (req, res) => {
  try {
    const { resumeId } = req.body;
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—é–º–µ —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
    const resumeResponse = await fetch(`https://api.hh.ru/resumes/${resumeId}`, {
      headers: {
        'Authorization': `Bearer ${req.session.tokens.access_token}`,
        'User-Agent': 'HH-Airtable-App/1.0'
      }
    });
    
    if (!resumeResponse.ok) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ');
    }
    
    const resumeData = await resumeResponse.json();
    
    if (!resumeData.actions || !resumeData.actions.get_with_contact) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º —ç—Ç–æ–≥–æ —Ä–µ–∑—é–º–µ');
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    const contactResponse = await fetch(resumeData.actions.get_with_contact.url, {
      headers: {
        'Authorization': `Bearer ${req.session.tokens.access_token}`,
        'User-Agent': 'HH-Airtable-App/1.0'
      }
    });
    
    if (!contactResponse.ok) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã');
    }
    
    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—é–º–µ
    res.redirect(`/resume/${resumeId}`);
    
  } catch (error) {
    console.error('Contact view error:', error);
    res.send(`
      <h1>–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</h1>
      <p>${error.message}</p>
      <a href="/resume/${req.body.resumeId}">–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–∑—é–º–µ</a>
    `);
  }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Airtable
app.post('/save-to-airtable', isAuthenticated, async (req, res) => {
  try {
    const { resumeId } = req.body;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—é–º–µ
    const resumeResponse = await fetch(`https://api.hh.ru/resumes/${resumeId}`, {
      headers: {
        'Authorization': `Bearer ${req.session.tokens.access_token}`,
        'User-Agent': 'HH-Airtable-App/1.0'
      }
    });
    
    if (!resumeResponse.ok) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ');
    }
    
    const resume = await resumeResponse.json();
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    let phone = '';
    let email = '';
    
    if (resume.contact) {
      resume.contact.forEach(contact => {
        if (contact.type.id === 'cell' || contact.type.id === 'home') {
          phone = contact.value.formatted || contact.value;
        }
        if (contact.type.id === 'email') {
          email = contact.value;
        }
      });
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Airtable —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–æ–ª–µ–π
    const airtableData = {
      records: [{
        fields: {
          "Name": `${resume.last_name || ''} ${resume.first_name || ''} ${resume.middle_name || ''}`.trim(),
          "Job_Title": resume.title || '',
          "Email": email || '',
          "Phone number": phone || '',
          "resume_url": resume.alternate_url || '',
          "area": resume.area ? resume.area.name : '',
          "salary_amount": resume.salary ? resume.salary.amount : 0,
          "salary_currency": resume.salary ? resume.salary.currency : '',
          "experience_months": resume.total_experience ? resume.total_experience.months : 0,
          "age": resume.age || 0,
          "last_employer": resume.experience && resume.experience.length > 0 ? resume.experience[0].company : '',
          "education": resume.education && resume.education.primary && resume.education.primary.length > 0 
            ? `${resume.education.primary[0].name || ''} - ${resume.education.primary[0].organization || ''}` 
            : '',
          "skills": resume.skill_set && resume.skill_set.length > 0 ? resume.skill_set.join(', ') : '',
          "updated_at": new Date().toISOString().split('T')[0], // –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
          "Hiring Status": "Candidate"
        }
      }]
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Airtable
    const airtableResponse = await fetch(
      `https://api.airtable.com/v0/${process.env.AIRTABLE_BASE_ID}/People`,
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${process.env.AIRTABLE_API_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(airtableData)
      }
    );
    
    if (!airtableResponse.ok) {
      const error = await airtableResponse.text();
      console.error('Airtable error:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Airtable');
    }
    
    const result = await airtableResponse.json();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    res.send(`
      <!DOCTYPE html>
      <html lang="ru">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ - HH ‚Üí Airtable</title>
        <style>
          body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
          }
          .container {
            background: white;
            padding: 40px;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            max-width: 500px;
            width: 90%;
            text-align: center;
          }
          .success-icon {
            font-size: 64px;
            margin-bottom: 20px;
          }
          h1 {
            color: #48bb78;
            margin-bottom: 20px;
          }
          p {
            color: #4a5568;
            margin-bottom: 30px;
            line-height: 1.6;
          }
          .button {
            display: inline-block;
            padding: 12px 30px;
            margin: 10px;
            background: #667eea;
            color: white;
            text-decoration: none;
            border-radius: 25px;
            font-weight: 500;
            transition: all 0.3s ease;
          }
          .button:hover {
            background: #5a67d8;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
          }
          .button.secondary {
            background: #48bb78;
          }
          .button.secondary:hover {
            background: #38a169;
          }
          .details {
            background: #f7fafc;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            text-align: left;
          }
          .details-title {
            font-weight: 600;
            color: #2d3748;
            margin-bottom: 10px;
          }
          .details-item {
            color: #4a5568;
            margin: 5px 0;
          }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="success-icon">‚úÖ</div>
          <h1>–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</h1>
          <p>–†–µ–∑—é–º–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à—É –±–∞–∑—É Airtable.</p>
          
          <div class="details">
            <div class="details-title">–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏:</div>
            <div class="details-item">ID –≤ Airtable: ${result.records[0].id}</div>
            <div class="details-item">–ö–∞–Ω–¥–∏–¥–∞—Ç: ${airtableData.records[0].fields.Name}</div>
            <div class="details-item">–î–æ–ª–∂–Ω–æ—Å—Ç—å: ${airtableData.records[0].fields["Job_Title"]}</div>
          </div>
          
          <a href="/search" class="button">üîç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫</a>
          <a href="https://airtable.com/${process.env.AIRTABLE_BASE_ID}" target="_blank" class="button secondary">üìä –û—Ç–∫—Ä—ã—Ç—å Airtable</a>
        </div>
      </body>
      </html>
    `);
    
  } catch (error) {
    console.error('Save error:', error);
    res.send(`
      <h1>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</h1>
      <p>${error.message}</p>
      <a href="/resume/${req.body.resumeId}">–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–∑—é–º–µ</a>
    `);
  }
});

// –í—ã—Ö–æ–¥
app.get('/logout', (req, res) => {
  req.session.destroy();
  // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–∞–º–∏
  try {
    fs.unlinkSync(TOKENS_FILE);
  } catch (error) {
    console.error('Error deleting tokens file:', error);
  }
  res.redirect('/');
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`–û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT} –≤ –±—Ä–∞—É–∑–µ—Ä–µ`);
});